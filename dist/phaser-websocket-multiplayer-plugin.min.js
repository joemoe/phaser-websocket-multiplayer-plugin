const MESSAGE_TYPE={UPDATE_OBJECT:"update.object",KILL_OBJECT:"kill.object",ACTION_START:"action.start",ACTION_STOP:"action.stop"};export default class PhaserWebsocketMultiplayerPlugin extends Phaser.Plugins.BasePlugin{constructor(t){super("PhaserWebsocketMultiplayerPlugin",t),this.game=t.game,this.event=new Phaser.Events.EventEmitter,this.socket=null,this.id=((1<<24)*Math.random()|0).toString(16),this.name=null,this.localObject=null,this.featureExtractor=null,this.broadcastInterval=null,this.checkTimeoutsInterval=null,this.objectRegistry={},this.objectLastseen={},this.config={url:null,broadcastInterval:200,pauseTimeout:5e3,deadTimeout:15e3,checkTimeoutsInterval:100,autoConnect:!1,debug:!1}}init(t={}){this.config=Object.assign(this.config,t),this.config.autoConnect&&this.connect()}connect(t=""){""==t&&(t=this.config.url),this.log("trying to connect"),this.socket=new WebSocket(t),this.socket.addEventListener("open",this.onSocketOpen.bind(this)),this.socket.addEventListener("message",this.onSocketMessage.bind(this)),this.socket.addEventListener("close",this.onSocketClose.bind(this)),this.socket.addEventListener("error",this.onSocketError.bind(this))}onSocketOpen(t){this.log("socket open"),this.event.emit("socket.open",t),this.checkTimeoutsInterval=setInterval(this.checkTimeouts.bind(this),this.config.checkTimeoutsInterval)}onSocketMessage(t){let e=JSON.parse(t.data);if(e.id!=this.id)switch(e.type){case MESSAGE_TYPE.UPDATE_OBJECT:this.updateObject(e);break;case MESSAGE_TYPE.KILL_OBJECT:this.killObject(e.id);break;case MESSAGE_TYPE.ACTION_START:let t=[];for(let s=0;s<e.objects.length;s++)this.objectRegistry[e.objects[s]]&&t.push(this.objectRegistry[e.objects[s]]);this.event.emit("action.start."+e.actionType,e.id,t);break;case MESSAGE_TYPE.ACTION_STOP:this.event.emit("action.stop."+e.actionType,e.id)}}onSocketError(t){this.event.emit("socket.error",t)}onSocketClose(t){clearInterval(this.checkTimeoutsInterval),this.stopBroadcast(),this.event.emit("socket.close",t)}checkTimeouts(){let t=(new Date).getTime();Object.entries(this.objectLastseen).forEach(([e,s])=>{t-s>this.config.pauseTimeout&&this.pauseObject(e),t-s>this.config.deadTimeout&&this.killObject(e)})}setName(t){this.name=t}registerObject(t,e){this.objectRegistry[t]=e,e.setData("id",t)}pauseObject(t){this.event.emit("object.pause",this.objectRegistry[t],t)}killObject(t){this.event.emit("object.kill",this.objectRegistry[t],t),delete this.objectRegistry[t],delete this.objectLastseen[t]}updateObject(t){this.objectRegistry[t.id]||(this.objectRegistry[t.id]=!0,this.event.emit("object.create",t.data,t.id),this.log("create",t.data)),this.objectRegistry[t.id]&&!0!==this.objectRegistry[t.id]&&this.event.emit("object.update",this.objectRegistry[t.id],t.data,t.id),this.objectLastseen[t.id]=(new Date).getTime()}track(t,e){this.localObject=t,t.setData("id",this.id),this.featureExtractor=e,this.registerObject(this.id,t)}startBroadcast(){this.broadcastInterval=setInterval(()=>{this.broadcast()},this.config.broadcastInterval)}broadcast(){this.socket.send(JSON.stringify({type:MESSAGE_TYPE.UPDATE_OBJECT,id:this.id,data:this.featureExtractor(this.localObject)}))}stopBroadcast(){clearInterval(this.broadcastInterval)}startAction(t="generic",e=[]){this.socket.send(JSON.stringify({id:this.id,type:MESSAGE_TYPE.ACTION_START,actionType:t,objects:e}))}stopAction(t="generic"){this.socket.send(JSON.stringify({id:this.id,type:MESSAGE_TYPE.ACTION_STOP,actionType:t}))}log(t,e=" "){this.config.debug&&console.log("WEBSOCKET MULTIPLAYER: "+t,e)}}